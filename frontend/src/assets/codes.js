export default {
  mapper_code: 'def mapper(input):\n    """\n    Write your mapper code here, \n    the mapper should take in a list of strings as input \n    and return a list of strings as output\n    """\n    output = []\n    for line in input:\n        line=line.strip()\n        words=line.split()\n        for word in words:\n            output.append(f"{word}\\t1")\n    return output',
  reducer_code: 'def reducer(input):\n    """\n    Write your reducer code here,\n    the reducer should tak in a list of strings as input\n    and return a list of strings as output\n    """\n    current_word = None\n    current_count = 0\n    word = None\n    output = []\n\n    for line in input:\n        # remove leading and trailing whitespace\n        line = line.strip()\n\n        # parse the input we got from mapper.py\n        word, count = line.split("\\t", 1)\n\n        # convert count (currently a string) to int\n        try:\n            count = int(count)\n        except ValueError:\n            # count was not a number, so silently\n            # ignore/discard this line\n            continue\n\n        # this IF-switch only works because the framework sorts map output\n        # by key (here: word) before it is passed to the reducer\n        if current_word == word:\n            current_count += count\n        else:\n            if current_word:\n                # write result to STDOUT\n                output.append(f"{current_word}\\t{current_count}")\n            current_count = count\n            current_word = word\n\n    # do not forget to output the last word if needed!\n    if current_word == word:\n        output.append(f"{current_word}\\t{current_count}")\n    \n    return output',
  rdd_mapper1: '"def mapper(input):\n    """\n    mapper of paper_conference table\n    @input (paperID, paper name, year, conference ID)\n    @output (conferenceID, tagA, paper_name)\n    """\n    output = []\n    for line in input:\n        line=line.strip()\n        entry=line.split(\'\\t\')\n        output.append(f"{entry[-1]}\\tA\\t{entry[1]}")\n    return output"',
}
